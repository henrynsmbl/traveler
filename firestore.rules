rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Base rules for user data
    match /users/{userId} {
      // Allow users to read their own data
      allow read: if isAuthenticated() && isOwner(userId);
      
      // Allow users to write their own data
      allow write: if isAuthenticated() && isOwner(userId);
      
      // Allow updates to subscription field from anywhere (webhook)
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['subscription']);
      
      // Rules for chat sessions subcollection
      match /chatSessions/{sessionId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      match /subscription/{document=**} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Chat sessions collection (top-level)
    match /chatSessions/{sessionId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if isAuthenticated() && request.resource.data.userId == request.auth.uid;

      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && 
          get(/databases/$(database)/documents/chatSessions/$(sessionId)).data.userId == request.auth.uid;
      }
    }

    // Add rules for itineraries collection
    match /itineraries/{itineraryId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Add rules for selections collection (if needed)
    match /selections/{selectionId} {
      allow read, write: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Add rules for bookings collection
    match /bookings/{bookingId} {
      // Allow users to read their own bookings
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow users to create bookings
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Allow users to update their own bookings
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // For admin access based on email
      allow read, write: if isAuthenticated() && 
        (request.auth.token.email == "henry@aitinerary.world");
        
      allow read, write: if isAuthenticated() && 
        (request.auth.token.email == "henry@nsmbl.co");
        
      allow read, write: if isAuthenticated() && 
        (request.auth.token.email == "henrygardner30@gmail.com");
    }

    // Prevent access to all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}